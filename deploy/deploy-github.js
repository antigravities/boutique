const Git = require("nodegit");
const walk = require("./walk");
const fs = require("fs").promises;
const del = require("del");
const mkdirp = require("util").promisify(require("mkdirp"));

module.exports = async config => {
  await del("./deploytmp");

  let [ _, repourl, token ] = config.deploy.split(":");
  console.log("Deploying via GitHub to " + repourl);

  try {
    let repo = await Git.Clone("https://github.com/" + repourl, "./deploytmp", {
      fetchOpts: {
        callbacks: {
          credentials: () => Git.Cred.userpassPlaintextNew(token, "x-oauth-basic"),
          certificateCheck: () => 0
        }
      }
    });
    
    let index = await repo.refreshIndex();

    await walk("build", async item => {
      let file = item.split("build/")[1];

      let dir = file.split("/");
      dir.pop();
      await mkdirp("deploytmp/" + dir.join("/"));

      await fs.writeFile("deploytmp/" + file, await fs.readFile(item));
      await index.addByPath(file);
    });

    await index.write();
    let oid = await index.writeTree();

    let author = Git.Signature.now("Boutique", "boutique@cutie.cafe");

    let commit = await repo.createCommit("HEAD", author, author, "deployed autogenerated files", oid, [ await repo.getCommit(await Git.Reference.nameToId(repo, "HEAD")) ]);

    let remote = await Git.Remote.lookup(repo, "origin");
    await remote.push(["refs/heads/master:refs/heads/master"], {
      callbacks: {
        credentials: () => Git.Cred.userpassPlaintextNew(token, "x-oauth-basic")
      }
    });

    console.log("Committed and pushed " + commit);

    await del("./deploytmp/**");
  } catch(e){
    console.log("Deployment to " + repourl + " failed: " + e);
    console.log(e.stack);
  }
}